<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/rabbit
     http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd">
    <!--配置connection-factory，指定连接rabbit server参数 -->
    <rabbit:connection-factory id="connectionFactory" username="admin" password="123456"
                               host="192.168.1.198"
                               port="5672"
                               virtual-host="/"/>
    <bean id="rabbitConnectionFactory"
          class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
        <property name="host" value="192.168.1.198"/>
        <property name="username" value="admin"/>
        <property name="password" value="123456"/>
        <property name="port" value="5672"/>
        <property name="virtualHost" value="/"/>
        <property name="channelCacheSize" value="5"/>
        <property name="publisherConfirms" value="true"/>
    </bean>
    <!--
        这里是两个queue的定义
        exclusive：排他，该队列仅对首次声明它的连接可见，并在连接断开时自动删除
        Auto-delete:自动删除，如果该队列没有任何订阅的消费者的话，该队列会被自动删除。这种队列适用于临时队列。
        Durable:持久化
    -->
    <rabbit:queue id="queue" name="queue" durable="true" auto-delete="false" exclusive="false"/>
    <rabbit:queue id="queue2" name="queue2" durable="true" auto-delete="false" exclusive="false"/>

    <!--RabbitMQ的Consumer-->
    <bean id="messageReceiver" class="net.sumile.consumer.MessageConsumer"></bean>
    <bean id="messageReceiver2" class="net.sumile.consumer.MessageConsumerQueue2"></bean>

    <rabbit:listener-container connection-factory="connectionFactory" acknowledge="manual" concurrency="1"
                               prefetch="5">
        <rabbit:listener queues="queue" ref="messageReceiver"/>
        <rabbit:listener queues="queue2" ref="messageReceiver2"/>
    </rabbit:listener-container>


    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
    <rabbit:admin connection-factory="connectionFactory"/>


    <!-- 两种Exchange的定义 -->
    <rabbit:direct-exchange name="order" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="queue" key="order"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <rabbit:direct-exchange name="exchange" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="queue2" key="exchange"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <rabbit:topic-exchange name="message" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="queue2" pattern="*.log.phbj"/>
            <rabbit:binding queue="queue" pattern="*.order.phbj"/>
            <rabbit:binding queue="queue" pattern="*.pay.phbj"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!--定义是否使用序列化传输-->
    <!--<bean id="jsonMessageConverter"-->
    <!--class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter"></bean>-->
    <!--message-converter="jsonMessageConverter"-->

    <!--定义rabbit template用于数据的发送 -->
    <rabbit:template id="amqpTemplate" connection-factory="connectionFactory"
                     exchange="exchange" routing-key="exchange"/>
    <rabbit:template id="amqpTemplate2" connection-factory="connectionFactory"
                     exchange="order" routing-key="order"/>
    <bean id="amqpTemplate3"
          class="org.springframework.amqp.rabbit.core.RabbitTemplate">
        <property name="connectionFactory" ref="rabbitConnectionFactory"/>
        <property name="confirmCallback" ref="confirmCallBackListener"/>
        <property name="returnCallback" ref="returnCallBackListener"/>
        <property name="mandatory" value="true"/>
        <!--只有在关闭事务的情况下mandatory才起作用-->
        <property name="channelTransacted" value="false"/>
        <property name="exchange" value="message"/>
    </bean>
    <!--发送确认监听-->
    <bean id="confirmCallBackListener" class="net.sumile.producer.ConfirmCallBackListener"/>
    <bean id="returnCallBackListener" class="net.sumile.producer.ReturnCallBackListener"/>
</beans>